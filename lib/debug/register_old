// ignore_for_file: avoid_print

import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';

import '../../cubit/cubit.dart';
import '../widgets/widgets.dart';

class RegisterView extends StatelessWidget {
  const RegisterView({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: SingleChildScrollView(
        physics: const BouncingScrollPhysics(),
        padding: EdgeInsets.symmetric(horizontal: 30.w),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            VGap(height: 140.h),
            Text("Let's get Started",
                style: TextStyle(fontSize: 40.sp, fontWeight: FontWeight.bold)),
            VGap(height: 10.h),
            BlocBuilder<RegisterCubit, RegisterState>(
              builder: (context, state) {
                return PaddedBox(
                    label:
                        'Set a ${state.key == 0 ? 'Username' : state.key == 1 ? 'Email' : state.key == 2 ? 'Password' : 'Name'} ');
              },
            ),
            VGap(height: 40.h),
            BlocBuilder<RegisterCubit, RegisterState>(
              builder: (context, state) {
                return Text(
                  state.key == 0
                      ? 'Username'
                      : state.key == 1
                          ? 'Email'
                          : state.key == 2
                              ? 'Password'
                              : 'Name',
                  style: TextStyle(
                      color: Theme.of(context).iconTheme.color!.withOpacity(.5),
                      fontWeight: FontWeight.bold),
                );
              },
            ),
            VGap(height: 10.h),
            BlocBuilder<RegisterCubit, RegisterState>(
              builder: (context, state) {
                debugPrint('field state is ${state.key}');
                if (state.key == 0) {
                  return AuthField(
                      hintText: 'Enter a unique username',
                      keyboardType: TextInputType.text,
                      obscureText: false,
                      onChanged: (x) {
                        context.read<RegisterCubit>().setUsername(x);
                      },
                      initialValue: state.username,
                      eye: false);
                } else if (state.key == 1) {
                  return AuthField(
                      hintText: 'Enter a valid email',
                      keyboardType: TextInputType.emailAddress,
                      obscureText: false,
                      onChanged: (x) {
                        context.read<RegisterCubit>().setEmail(x);
                      },
                      initialValue: state.email,
                      eye: false);
                } else if (state.key == 2) {
                  return AuthField(
                      hintText: 'Enter a strong password',
                      keyboardType: TextInputType.visiblePassword,
                      obscureText: false,
                      onChanged: (x) {
                        context.read<RegisterCubit>().setPassword(x);
                      },
                      initialValue: state.password,
                      eye: false);
                } else {
                  return AuthField(
                      hintText: 'Enter a name',
                      keyboardType: TextInputType.name,
                      obscureText: false,
                      onChanged: (x) {
                        context.read<RegisterCubit>().setName(x);
                      },
                      initialValue: state.name,
                      eye: false);
                }
              },
            ),
            VGap(height: 20.h),
            BlocBuilder<RegisterCubit, RegisterState>(
              builder: (context, state) {
                return Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    AuthButtonSmall(
                      label: 'Back',
                      onTap: () {
                        if (state.key > 0) {
                          context
                              .read<RegisterCubit>()
                              .setKey(context.read<RegisterCubit>().key - 1);
                          print(state.key);
                        }
                      },
                      outlined: true,
                    ),
                    AuthButtonSmall(
                      label: state.key == 3 ? 'Submit' : 'Next',
                      onTap: state.key == 3
                          ? () => context.read<RegisterCubit>().REGISTER()
                          : () {
                              if (state.key < 3) {
                                context
                                    .read<RegisterCubit>()
                                    .setKey(state.key + 1);
                                print('button state is ${state.key}');
                                if (state.key == 3) {}
                              }
                            },
                      outlined: false,
                    )
                  ],
                );
              },
            ),
            VGap(height: 30.h),
            Center(
                child: Text(
              '⎯⎯⎯⎯⎯⎯⎯⎯⎯     OR    ⎯⎯⎯⎯⎯⎯⎯⎯⎯',
              style: TextStyle(
                  color: Theme.of(context).iconTheme.color!.withOpacity(.5)),
            )),
            VGap(height: 30.h),
            AuthButton(
                label: 'Back to Login',
                onTap: () => Navigator.pushReplacementNamed(context, '/auth'),
                outlined: true),
          ],
        ),
      ),
    );
  }
}
